
# Задача на преобразование массива
#
# Цель: Написать функцию на Python, которая принимает на вход одномерный массив чисел и число столбцов `n`,
# а затем возвращает двумерный массив (матрицу), заполненный элементами одномерного массива построчно.
#
# Условия:
# - Если элементов в одномерном массиве не хватает для заполнения последней строки матрицы,
#   оставшиеся места должны быть заполнены нулями.
# - Функция должна корректно обрабатывать входные данные разных размеров.
#
# Пример:
# Входной массив и число столбцов:
# [1, 2, 3, 4, 5, 6, 7], n = 3
#
# Выходная матрица:
# [[1, 2, 3],
#  [4, 5, 6],
#  [7, 0, 0]]
#
# Функция: reshape_array
#
# Параметры:
# - `arr` (list of int): Одномерный список целых чисел.
# - `n` (int): Число столбцов для результирующей матрицы.
#
# Возвращает:
# - list of list of int: Двумерный массив, где каждый внутренний список представляет собой строку матрицы.
#
# Описание:
# Функция `reshape_array` принимает список целых чисел и преобразует его в двумерный массив,
# где количество столбцов равно `n`. Элементы заполняются построчно.
# Если элементов не хватает для заполнения последней строки, оставшиеся ячейки заполняются нулями.
#
# Пример использования функции:

input_array = [1, 2, 3, 4, 5, 6, 7]
columns = 3


def reshape_array(arr, n):
    arr = input_array
    n = columns
    my_list = []
    # for elements in arr:
    #     my_list.append(elements)
    temp_list = []
    for num in arr:
        temp_list.append(num)
        if len(temp_list) == n:
            my_list.append(temp_list.copy())
            temp_list.clear()
    if len(temp_list) > 0:
        temp_list += [0] * (n - len(temp_list))
        my_list.append(temp_list.copy())
    return my_list
    # num_rows = (len(arr) + n - 1) // n
    # matrix = []
    # for i in range(num_rows):
    #     row = arr[i * n: (i + 1) * n]
    #     matrix.append(row)
    # return matrix


# input_array = [1, 2, 3, 4, 5, 6, 7]
# columns = 3
result = reshape_array(input_array, columns)
print(result)  # Выведет: [[1, 2, 3], [4, 5, 6], [7, 0, 0]]

